// <auto-generated />
using System;
using LSStudentEmployeeAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LSStudentEmployeeAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211229184331_timesAndShiftsTableToDb")]
    partial class timesAndShiftsTableToDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.BagCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BagChecks");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GraduateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.FTEReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Communication")
                        .HasColumnType("float");

                    b.Property<string>("ConstructiveFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluatingFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluatingPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Initiative")
                        .HasColumnType("float");

                    b.Property<double>("JobKnowledge")
                        .HasColumnType("float");

                    b.Property<string>("PositiveFeedBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("QualityOfWork")
                        .HasColumnType("float");

                    b.Property<double>("Reliability")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FTEReviews");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.SelfEval", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Communication")
                        .HasColumnType("float");

                    b.Property<string>("EvaluatingPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Initiative")
                        .HasColumnType("float");

                    b.Property<double>("JobKnowledge")
                        .HasColumnType("float");

                    b.Property<double>("QualityOfWork")
                        .HasColumnType("float");

                    b.Property<double>("Reliability")
                        .HasColumnType("float");

                    b.Property<bool?>("giveFeedback")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SelfEvals");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.Shift", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ShiftResponseId")
                        .HasColumnType("int");

                    b.Property<int?>("TimesResponseTRId")
                        .HasColumnType("int");

                    b.Property<int>("account_id")
                        .HasColumnType("int");

                    b.Property<int>("acknowledged")
                        .HasColumnType("int");

                    b.Property<string>("acknowledged_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("actionable")
                        .HasColumnType("bit");

                    b.Property<bool>("alerted")
                        .HasColumnType("bit");

                    b.Property<int>("block_id")
                        .HasColumnType("int");

                    b.Property<int>("break_time")
                        .HasColumnType("int");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("creator_id")
                        .HasColumnType("int");

                    b.Property<string>("end_time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("instances")
                        .HasColumnType("int");

                    b.Property<bool>("is_open")
                        .HasColumnType("bit");

                    b.Property<string>("linked_users")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("location_id")
                        .HasColumnType("int");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notified_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("position_id")
                        .HasColumnType("int");

                    b.Property<bool>("published")
                        .HasColumnType("bit");

                    b.Property<string>("published_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shiftchain_key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("site_id")
                        .HasColumnType("int");

                    b.Property<string>("start_time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ShiftResponseId");

                    b.HasIndex("TimesResponseTRId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.ShiftLead", b =>
                {
                    b.Property<int>("SLID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Block")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("SLName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SLID");

                    b.ToTable("ShiftLead");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.ShiftResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("end")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("start")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShiftResponses");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.Site", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TimesResponseTRId")
                        .HasColumnType("int");

                    b.Property<int>("account_id")
                        .HasColumnType("int");

                    b.Property<int>("location_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("TimesResponseTRId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.TechCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TechCheck");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.Time", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TimesResponseTRId")
                        .HasColumnType("int");

                    b.Property<int>("account_id")
                        .HasColumnType("int");

                    b.Property<int>("alert_type")
                        .HasColumnType("int");

                    b.Property<int>("break_hours")
                        .HasColumnType("int");

                    b.Property<string>("created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("creator_id")
                        .HasColumnType("int");

                    b.Property<string>("end_time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("hourly_rate")
                        .HasColumnType("float");

                    b.Property<bool>("is_alerted")
                        .HasColumnType("bit");

                    b.Property<bool>("is_approved")
                        .HasColumnType("bit");

                    b.Property<double>("length")
                        .HasColumnType("float");

                    b.Property<int>("location_id")
                        .HasColumnType("int");

                    b.Property<int>("modified_by")
                        .HasColumnType("int");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("position_id")
                        .HasColumnType("int");

                    b.Property<long>("shift_id")
                        .HasColumnType("bigint");

                    b.Property<int>("site_id")
                        .HasColumnType("int");

                    b.Property<string>("split_time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("start_time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sync_hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sync_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("TimesResponseTRId");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.TimesResponse", b =>
                {
                    b.Property<int>("TRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("end")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("start")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TRId");

                    b.ToTable("TimesResponses");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ShiftResponseId")
                        .HasColumnType("int");

                    b.Property<int?>("TimesResponseTRId")
                        .HasColumnType("int");

                    b.Property<int>("account_id")
                        .HasColumnType("int");

                    b.Property<bool>("activated")
                        .HasColumnType("bit");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employee_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("hourly_rate")
                        .HasColumnType("float");

                    b.Property<int>("hours_max")
                        .HasColumnType("int");

                    b.Property<int>("hours_preferred")
                        .HasColumnType("int");

                    b.Property<bool>("is_hidden")
                        .HasColumnType("bit");

                    b.Property<bool>("is_payroll")
                        .HasColumnType("bit");

                    b.Property<bool>("is_private")
                        .HasColumnType("bit");

                    b.Property<int>("is_trusted")
                        .HasColumnType("int");

                    b.Property<string>("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("login_id")
                        .HasColumnType("int");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("timezone_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<string>("uuid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ShiftResponseId");

                    b.HasIndex("TimesResponseTRId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.BagCheck", b =>
                {
                    b.HasOne("LSStudentEmployeeAPI.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.Shift", b =>
                {
                    b.HasOne("LSStudentEmployeeAPI.Models.ShiftResponse", null)
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftResponseId");

                    b.HasOne("LSStudentEmployeeAPI.Models.TimesResponse", null)
                        .WithMany("shifts")
                        .HasForeignKey("TimesResponseTRId");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.Site", b =>
                {
                    b.HasOne("LSStudentEmployeeAPI.Models.TimesResponse", null)
                        .WithMany("sites")
                        .HasForeignKey("TimesResponseTRId");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.TechCheck", b =>
                {
                    b.HasOne("LSStudentEmployeeAPI.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.Time", b =>
                {
                    b.HasOne("LSStudentEmployeeAPI.Models.TimesResponse", null)
                        .WithMany("times")
                        .HasForeignKey("TimesResponseTRId");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.User", b =>
                {
                    b.HasOne("LSStudentEmployeeAPI.Models.ShiftResponse", null)
                        .WithMany("users")
                        .HasForeignKey("ShiftResponseId");

                    b.HasOne("LSStudentEmployeeAPI.Models.TimesResponse", null)
                        .WithMany("users")
                        .HasForeignKey("TimesResponseTRId");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.ShiftResponse", b =>
                {
                    b.Navigation("Shifts");

                    b.Navigation("users");
                });

            modelBuilder.Entity("LSStudentEmployeeAPI.Models.TimesResponse", b =>
                {
                    b.Navigation("shifts");

                    b.Navigation("sites");

                    b.Navigation("times");

                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
